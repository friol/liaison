/*
    the official lia test suite
    (c) friol 2k23-24
*/    

fn fun1(p)
{
    p+=1;
    return p;
}

fn fun2(p)
{
    p*=10;
    return p;
}

fn test1()
{
    v=42;
    v+=42;
    if (v==84)
    {
        return 1;
    }
    else
    {
        print("Test 1 failed.");
        return 0;
    }
}

fn test2()
{
    arr=[1,2,5,7,9,11];
    arr.add(13);
    l=arr.length;

    if (l==7)
    {
        return 1;
    }
    else
    {
        print("Test 2 failed.");
        return 0;
    }
}

fn test3()
{
    n=2;
    res=fun2(fun1(n));
    if (res==30)
    {
        return 1;
    }
    else
    {
        print("Test 3 failed.");
        return 0;
    }
}

fn test4()
{
    s="precipitevolissimevolmente";
    if (s.length==26)
    {
        return 1;
    }
    else
    {
        print("Test 4 failed.");
        return 0;
    }
}

fn test5()
{
    s="this is a test of the split function";
    arr=s.split(" ");
    if (arr[6]=="split")
    {
        return 1;
    }
    else
    {
        print("Test 5 failed.");
        return 0;
    }
}

fn test6()
{
    idx=0;
    while (idx<1000)
    {
        idx+=(3-2);
    }

    if (idx==1000)
    {
        return 1;
    }
    else
    {
        print("Test 6 failed.");
        return 0;
    }
}

fn test7()
{
    arr=[];
    idx=0;
    while (idx<10000)
    {
        arr.add(idx);
        idx+=1;
    }

    pos=arr.find(5689);
    if (pos==5689)
    {
        return 1;
    }
    else
    {
        print("Test 7 failed, pos is ",pos);
        return 0;
    }
}

fn test8(a,b,c)
{
    res=a;
    res*=b;
    res*=c;
    if (res==24)
    {
        return 1;
    }
    else
    {
        print("Test 8 failed.");
        return 0;
    }
}

fn test9()
{
    s="42";
    i=toInteger(s);
    if (i==42)
    {
        return 1;
    }
    else
    {
        print("Test 9 failed.");
        return 0;
    }
}

fn test10()
{
    n=4096;
    n>>=2;
    if (n==1024)
    {
        return 1;
    }
    else
    {
        print("Test 10 failed.");
        return 0;
    }
}

fn test11()
{
    s="";
    s2="compose me";
    foreach(c in s2)
    {
        s+=c;
    }

    if (s=="compose me")
    {
        return 1;
    }
    else
    {
        print("Test 11 failed.");
        return 0;
    }
}

fn test12()
{
    myDict={};
    myDict["keyOne"]=40;
    myDict["keyTwo"]=2;

    res=0;
    res+=myDict["keyOne"];
    res+=myDict["keyTwo"];
    
    if (res==42)
    {
        return 1;
    }
    else
    {
        print("Test 12 failed.");
        return 0;
    }
}

fn test13()
{
    k=42;
    sk=toString(k);
    if (sk=="42")
    {
        return 1;
    }
    else
    {
        print("Test 13 failed.");
        return 0;
    }
}

fn test14()
{
    a=[1,2,3];
    b=[1,2,4];

    if (a<=b)
    {
        return 1;
    }
    else
    {
        print("Test 14 failed.");
        return 0;
    }
}

fn test15()
{
    a1=[1,2,3];
    a2=[4,5,6,7];
    a1+=a2;
    if (a1.length==7)
    {
        return 1;
    }
    else
    {
        print("Test 15 failed.");
        return 0;
    }
}

fn test16()
{
    a=1;
    b="2";
    c=6-3;
    d=8-4;

    e=a+toInteger(b)+c+(d*d);

    if (e==22)
    {
        return 1;
    }
    else
    {
        print("Test 16 failed.");
        return 0;
    }
}

fn test17()
{
    a=1;
    b="2";
    c=6-3;

    if ((a==1)&&(b=="2")&&(c==3))
    {
        return 1;
    }
    else
    {
        print("Test 17 failed.");
        return 0;
    }
}

fn test18()
{
    a=toLong("9223372036854775800");
    b=toLong("7");
    c=a+b;

    if (c==toLong("9223372036854775807"))
    {
        return 1;
    }
    else
    {
        print("Test 18 failed.");
        return 0;
    }
}

fn test19()
{
    a=toLong("4096");
    b=toLong("4096");
    c=a*b;
    d=lSqrt(c);
    
    if (d==toLong("4096"))
    {
        return 1;
    }
    else
    {
        print("Test 19 failed.");
        return 0;
    }
}

fn test20()
{
    a=[1,2,3,4];
    b=[5,6,7,8];
    c=[];
    c.add(a);
    c.add(b);
    k=c[0][1];
    j=c[1][1];
    
    r=k+j;
    if (r==8)
    {
        return 1;
    }
    else
    {
        print("Test 20 failed.");
        return 0;
    }
}

fn test21()
{
    a=256;
    a%=64;

    if (a==0)
    {
        return 1;
    }
    else
    {
        print("Test 21 failed.");
        return 0;
    }
}

fn test22()
{
    arr=[];
    idx=0;
    while (idx<100)
    {
        n=rnd(100);
        arr.add(n);
        idx+=1;
    }

    arr.sort();

    if (arr.length==100)
    {
        return 1;
    }
    else
    {
        print("Test 22 failed.");
        return 0;
    }
}

fn test23()
{
    a=true;
    if (a)
    {
        return 1;
    }
    else
    {
        print("Test 23 failed.");
        return 0;
    }
}

fn test24()
{
    // minus expression
    n=-2;
    m=-n;
    if (m==2)
    {
        return 1;
    }
    else
    {
        print("Test 24 failed.");
        return 0;
    }
}

fn main(params)
{
    print("Lia test suite v0.3 starting...");
    t0=getMillisecondsSinceEpoch();

    res=0;
    /* test variable assignment and increment */
    res+=test1();
    /* tests array 'add' function and length */
    res+=test2();
    /* tests nested functions */
    res+=test3();
    /* test 4 tests string variables and length */
    res+=test4();
    /* test 5 tests split function */
    res+=test5();
    /* test 6 tests the while statement */
    res+=test6();
    /* test 7 tests the find function for arrays */
    res+=test7();
    /* passing multiple parameters to a function */
    res+=test8(2,3,4);
    /* tests the toInteger function */
    res+=test9();
    /* tests the right shift operator */
    res+=test10();
    /* tests foreach cycles */
    res+=test11();
    /* test 12 - dictionaries */
    res+=test12();
    /* test 13 - toString */
    res+=test13();
    /* test 14 - array comparison */
    res+=test14();
    /* array concatenation-'sum' */
    res+=test15();
    /* complex math expressions */
    res+=test16();
    /* complex logic expressions */
    res+=test17();
    /* long long ints */
    res+=test18();
    /* lSqrt function */
    res+=test19();
    /* arrays of arrays */
    res+=test20();
    /* modulo statement */
    res+=test21();
    /* rnd & sort functions */
    res+=test22();
    /* evaluating if expressions */
    res+=test23();
    /* minus expression */
    res+=test24();

    t1=getMillisecondsSinceEpoch();
    t1-=t0;

    print(res,"/24 tests passed.");
    print("Execution time:",t1);
    // exec. time around 730ms in debug on my pc
}
