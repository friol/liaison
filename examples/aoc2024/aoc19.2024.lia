/* AoC 2024 19 */

glbListOfColors=[];
glbNeededPatterns=[];
glbReducedSet=[];
glbCacheDict={};

fn readInput()
{
    //sarr=readTextFileLineByLine("d:\prova\aoc2024\aoc19.2024.test.txt");
    sarr=readTextFileLineByLine("d:\prova\aoc2024\aoc19.2024.txt");
    return sarr;
}

fn parseInput(arr)
{
    foreach (el in arr)
    {
        if (el.find(",")!=-1)
        {
            glbListOfColors=el.split(", ");
        }
        else
        {
            if (el.length>0)
            {
                glbNeededPatterns.add(el);
            }
        }
    }
}

fn canBeMade(s)
{
    //print("analyzing ",s);

    if (s.length==0)
    {
        print("this should not happen");
        return false;
    }

    foreach (block in glbListOfColors)
    {
        if (s.find(block)==0)
        {
            //print(block," matches in ",s);
            if (s.length==block.length)
            {
                // finished
                //print("end condition: can be made!");
                return true;
            }
            else
            {
                sslen=s.length-block.length;
                subss="";
                idx=0;
                while (idx<s.length)
                {
                    if (idx>=block.length)
                    {
                        subss+=s[idx];
                    }

                    idx+=1;
                }
                ec=canBeMade(subss);
                if (ec==true)
                {
                    return true;
                }
            }
        }
    }

    return false;
}

fn calcCombinations(s)
{
    foreach (k in glbCacheDict.keys)
    {
        if (s==k)
        {
            return glbCacheDict[k];
        }
    }

    totz=0L;
    foreach (block in glbReducedSet)
    {
        if (s.find(block)==0)
        {
            //print(block," matches in ",s);
            if (s.length==block.length)
            {
                // finished
                totz+=1L;
            }
            else
            {
                sslen=s.length-block.length;
                subss="";
                idx=0;
                while (idx<s.length)
                {
                    if (idx>=block.length)
                    {
                        subss+=s[idx];
                    }

                    idx+=1;
                }

                totz+=calcCombinations(subss);
            }
        }
    }

    glbCacheDict[s]=totz;
    return totz;
}

fn part1(arr)
{
    parseInput(arr);

    foreach (design in glbNeededPatterns)
    {
        canBeMade(design);
    }
}

fn part2(arr)
{
    parseInput(arr);

    totKomb=0L;
    foreach (design in glbNeededPatterns)
    {
        print("Testing ",design);
        if (canBeMade(design))
        {
            glbReducedSet=[];
            foreach (towel in glbListOfColors)
            {
                if (design.find(towel)!=-1)
                {
                    glbReducedSet.add(towel);
                }
            }
            nc=calcCombinations(design);
            print(nc);
            totKomb+=nc;
        }
    }

    print(totKomb);
}

fn main(params)
{
    input=readInput();
    //part1(input);
    part2(input);
}
