/* AoC 2024 24 */

glbWiresDict={};

fn readInput()
{
    //sarr=readTextFileLineByLine("d:\prova\aoc2024\aoc24.2024.test.txt");
    sarr=readTextFileLineByLine("d:\prova\aoc2024\aoc24.2024.txt");
    return sarr;
}

fn doBooleanOp(v1,v2,op)
{
    if (op=="AND")
    {
        if ((v1==1)&&(v2==1))
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
    if (op=="OR")
    {
        if ((v1==1)||(v2==1))
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
    if (op=="XOR")
    {
        if (v1!=v2)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }

    print("this should not happen");
    return -1;
}

fn solve(gatesList)
{
    atLeastOneSolved=false;
    foreach (gate in gatesList)
    {
        rez=gate[3];
        if (glbWiresDict.findKey(rez)==-1)
        {
            v1=gate[1];
            v2=gate[2];

            if ((glbWiresDict.findKey(v1)!=-1)&&(glbWiresDict.findKey(v2)!=-1))
            {
                //print("adding ",rez);
                glbWiresDict[rez]=doBooleanOp(glbWiresDict[v1],glbWiresDict[v2],gate[0]);
                atLeastOneSolved=true;
            }
        }
    }

    return atLeastOneSolved;
}

fn part1(input)
{
    gatesList=[];

    foreach (row in input)
    {
        if (row.length!=0)
        {
            if (row.find(":")!=-1)
            {
                line=row.split(": ");
                glbWiresDict[line[0]]=toInteger(line[1]);
            }
            else
            {
                line=row.split(" ");
                gatesList.add([line[1],line[0],line[2],line[4]]);
            }
        }
    }

    print(glbWiresDict);
    print(gatesList);

    anotherOne=true;
    while (anotherOne)
    {
        anotherOne=solve(gatesList);
    }

    bigRez=0L;
    mult=1L;
    foreach (key in glbWiresDict.keys)
    {
        if (key[0]=="z")
        {
            print(key," ",glbWiresDict[key]);
            kval=toLong(toString(glbWiresDict[key]));
            bigRez+=mult*kval;
            mult*=2L;
        }
    }

    print(bigRez);
}

fn getBinNumber(l,start,end)
{
    rez="";
    idx=start;
    while (idx<=end)
    {
        k=l;
        if (idx<10)
        {
            k+="0";
        }
        k+=toString(idx);
        rez=toString(glbWiresDict[k])+rez;
        idx+=1;
    }

    return rez;
}

fn binToLong(n)
{
    ret=0L;
    mult=1L;
    idx=n.length-1;
    while (idx>=0)
    {
        ret+=toLong(n[idx])*mult;
        mult*=2L;
        idx-=1;
    }

    return ret;
}

fn findNotXorredZs(gatesList)
{
    res=[];

    idx=0;
    while (idx<=44)
    {
        s=toString(idx);
        if (s.length<2)
        {
            s="0"+s;
        }

        wireName="z"+s;

        found=false;
        foreach (gate in gatesList)
        {
            if (gate[0]=="XOR")
            {
                if (gate[3]==wireName)
                {
                    found=true;
                }
            }
        }

        if (!found)
        {
            res.add(wireName);
        }

        idx+=1;
    }

    return res;
}

fn isResultOf(op,compname,gatesList,wireName)
{
    foreach (gate in gatesList)
    {
        if ((gate[0]==op)&&(gate[3]==compname))
        {
            if (op=="XOR")
            {
                /*id=wireName[1]+wireName[2];
                gate1=gate[1];
                gate2=gate[2];

                id1=gate1[1]+gate1[2];
                id2=gate2[1]+gate2[2];

                if ((id1==id)&&(id2==id))
                {
                    return true;
                }*/
                return true;
            }
            else
            {
                return true;
            }
        }
    }

    return false;
}

fn findCompNotXor(gatesList,notXorred)
{
    res=[];

    idx=1;
    while (idx<=44)
    {
        s=toString(idx);
        if (s.length<2)
        {
            s="0"+s;
        }

        wireName="z"+s;

        if (notXorred.find(wireName)==-1)
        {
            foreach (gate in gatesList)
            {
                if ((gate[3]==wireName)&&(gate[0]=="XOR"))
                {
                    //print(gate[3]," is xor of ",gate[1]," ",gate[2]);
                    if ( (!isResultOf("XOR",gate[1],gatesList,wireName)) && (!isResultOf("XOR",gate[2],gatesList,wireName)) )
                    {
                        res.add(gate[1]);
                    }
                }
            }
        }

        idx+=1;
    }

    return res;
}

fn findCompNotOr(gatesList,notXorred)
{
    res=[];

    idx=2;
    while (idx<=44)
    {
        s=toString(idx);
        if (s.length<2)
        {
            s="0"+s;
        }

        wireName="z"+s;

        if (notXorred.find(wireName)==-1)
        {
            foreach (gate in gatesList)
            {
                if ((gate[3]==wireName)&&(gate[0]=="XOR"))
                {
                    if ( (!isResultOf("OR",gate[1],gatesList,wireName)) && (isResultOf("XOR",gate[2],gatesList,wireName)) ) 
                    {
                        //print("not ORz ",gate[1]," ",gate[2]);
                        //res.add(gate[2]);
                    }
                    if ( (isResultOf("XOR",gate[1],gatesList,wireName)) && (!isResultOf("OR",gate[2],gatesList,wireName)) )
                    {
                        //print("not ORz ",gate[1]," ",gate[2]);
                        res.add(gate[2]);
                    }

                    andedG1=false;
                    if (isResultOf("OR",gate[1],gatesList,wireName))
                    {
                        //print("checking AND for ",gate[1]);
                        foreach (g2 in gatesList)
                        {
                            if ((g2[0]=="OR")&&(g2[3]==gate[1]))
                            {
                                //print("Components: ",g2[1]," ",g2[2]);
                                foreach (g3 in gatesList)
                                {
                                    if ((g3[0]=="AND")&&(g3[3]==g2[1]))
                                    {
                                        k1=g3[1]; k2=g3[2];
                                        if ((k1[0]=="x")||(k2[0]=="x"))
                                        {
                                            andedG1=true;
                                            //print(g3);
                                        }
                                    }
                                    if ((g3[0]=="AND")&&(g3[3]==g2[2]))
                                    {
                                        k1=g3[1]; k2=g3[2];
                                        if ((k1[0]=="x")||(k2[0]=="x"))
                                        {
                                            andedG1=true;
                                            //print(g3);
                                        }
                                    }
                                }

                                if (!andedG1)
                                {
                                    //print(g2," is strange");
                                    res.add(g2[1]);
                                }
                            }
                        }
                    }

                    andedG2=false;
                    if (isResultOf("OR",gate[2],gatesList,wireName))
                    {
                        //print("checking AND for ",gate[2]);
                        foreach (g2 in gatesList)
                        {
                            if ((g2[0]=="OR")&&(g2[3]==gate[2]))
                            {
                                //print("Components: ",g2[1]," ",g2[2]);
                                foreach (g3 in gatesList)
                                {
                                    if ((g3[0]=="AND")&&(g3[3]==g2[1]))
                                    {
                                        k1=g3[1]; k2=g3[2];
                                        if ((k1[0]=="x")||(k2[0]=="x"))
                                        {
                                            andedG2=true;
                                            //print(g3);
                                        }
                                    }
                                    if ((g3[0]=="AND")&&(g3[3]==g2[2]))
                                    {
                                        k1=g3[1]; k2=g3[2];
                                        if ((k1[0]=="x")||(k2[0]=="x"))
                                        {
                                            andedG2=true;
                                            //print(g3);
                                        }
                                    }
                                }

                                if (!andedG2)
                                {
                                    //print(g2," is strange");
                                    res.add(g2[2]);
                                }

                            }
                        }
                    }

                }
            }
        }

        idx+=1;
    }

    return res;
}

fn applySwap(gatesList,swappp)
{
    newGL=[];

    foreach (gate in gatesList)
    {
        /*if (gate[1]==swappp[0])
        {
            gate[1]=swappp[1];
        }
        else
        {
            if (gate[1]==swappp[1])
            {
                gate[1]=swappp[0];
            }
        }

        if (gate[2]==swappp[0])
        {
            gate[2]=swappp[1];
        }
        else
        {
            if (gate[2]==swappp[1])
            {
                gate[2]=swappp[0];
            }
        }*/

        if (gate[3]==swappp[0])
        {
            gate[3]=swappp[1];
        }
        else
        {
            if (gate[3]==swappp[1])
            {
                gate[3]=swappp[0];
            }
        }

        newGL.add(gate);
    }

    return newGL;
}

fn newSolve(gatesList,swaps)
{
    idx=0;
    while (idx<swaps.length)
    {
        curSwap=[swaps[idx],swaps[idx+1]];
        gatesList=applySwap(gatesList,curSwap);
        idx+=2;
    }

    print("Solving:",swaps);
    //print(gatesList);
    while (solve(gatesList))
    {
    }

    idx=0;
    while (idx<=45)
    {
        s="z";
        if (idx<10)
        {
            s+="0";
        }
        s+=toString(idx);
        if (glbWiresDict.findKey(s)==-1)
        {
            //print(s," not found");
            return;
        }
        idx+=1;
    }

    xnum=binToLong(getBinNumber("x",0,44));
    ynum=binToLong(getBinNumber("y",0,44));
    znum=binToLong(getBinNumber("z",0,45));

    //print(xnum," ",ynum," ",znum);
    //print("Sum:",xnum+ynum);

    if (znum!=(xnum+ynum))
    {
        //print("does not compute");
        return false;
    }

    return true;
}

fn longToBinary(n)
{
    b="";
    while (n!=0L)
    {
        b=b+toString(n%2L);
        n>>=2L;
    }

    return b;
}

fn part2(input)
{
    gatesList=[];

    foreach (row in input)
    {
        if (row.length!=0)
        {
            if (row.find(":")!=-1)
            {
                line=row.split(": ");
                glbWiresDict[line[0]]=toInteger(line[1]);
            }
            else
            {
                line=row.split(" ");
                gatesList.add([line[1],line[0],line[2],line[4]]);
            }
        }
    }

    print(glbWiresDict);
    print(gatesList);

    notXorred=findNotXorredZs(gatesList);
    print("End wires (Z) not xorred:",notXorred);

    compNotXor=findCompNotXor(gatesList,[]);
    print("Component not xorred:",compNotXor);

    compNotOr=findCompNotOr(gatesList,[]);
    print("Component not orred:",compNotOr);

    //

    swapsCandidates=[];
    foreach (el in notXorred)
    {
        swapsCandidates.add(el);
    }
    foreach (el in compNotXor)
    {
        swapsCandidates.add(el);
    }
    foreach (el in compNotOr)
    {
        swapsCandidates.add(el);
    }
    swapsCandidates.add("gvm");

    //

    initialWiresDict={};
    foreach (row in input)
    {
        if (row.length!=0)
        {
            if (row.find(":")!=-1)
            {
                line=row.split(": ");
                initialWiresDict[line[0]]=toInteger(line[1]);
            }
        }
    }


    swap=["xx","xx","xx","xx","xx","xx","xx","xx"];
    foreach (s0 in [notXorred[0]])
    {
        swap[0]=s0;
        foreach (s1 in swapsCandidates)
        {
            if (s1!=s0)
            {
                swap[1]=s1;
                foreach (s2 in [notXorred[1]])
                {
                    if ((s2!=s1)&&(s2!=s0))
                    {
                        swap[2]=s2;
                        foreach (s3 in swapsCandidates)
                        {
                            if ((s3!=s2)&&(s3!=s1)&&(s3!=s0))
                            {
                                swap[3]=s3;
                                foreach (s4 in [notXorred[2]])
                                {
                                    if ((s4!=s3)&&(s4!=s2)&&(s4!=s1)&&(s4!=s0))
                                    {
                                        swap[4]=s4;
                                        foreach (s5 in swapsCandidates)
                                        {
                                            if ((s5!=s4)&&(s5!=s3)&&(s5!=s2)&&(s5!=s1)&&(s5!=s0))
                                            {
                                                swap[5]=s5;
                                                foreach (s6 in swapsCandidates)
                                                {
                                                    if ((s6!=s5)&&(s6!=s4)&&(s6!=s3)&&(s6!=s2)&&(s6!=s1)&&(s6!=s0))
                                                    {
                                                        swap[6]=s6;
                                                        foreach (s7 in swapsCandidates)
                                                        {
                                                            if ((s7!=s6)&&(s7!=s5)&&(s7!=s4)&&(s7!=s3)&&(s7!=s2)&&(s7!=s1)&&(s7!=s0))
                                                            {
                                                                swap[7]=s7;

                                                                glbWiresDict=initialWiresDict;

                                                                if (newSolve(gatesList,swap))
                                                                {
                                                                    swap.sort();
                                                                    print("Solution found:",swap);
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

fn main(params)
{
    input=readInput();
    //part1(input);
    part2(input);
}
