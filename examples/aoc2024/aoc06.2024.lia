
/* 
    aoc 06 2024 lia 
    utterly slow solution; should examine the interpreter deeper to see what causes the slowness
    or maybe the paths are just complex
*/

glbMap=[];
glbVisitedMap=[];
glbinitialC=-1;
glbinitialR=-1;
glbDirections=[[0,-1],[1,0],[0,1],[-1,0]];

fn readInput()
{
    //sarr=readTextFileLineByLine("d:\prova\aoc2024\aoc2024.06.test.txt");
    sarr=readTextFileLineByLine("d:\prova\aoc2024\aoc06.2024.txt");
    return sarr;
}

fn printMap()
{
    row=0;
    while (row<glbMap.length)
    {
        col=0;
        curLine="";
        while (col<glbMap[0].length)
        {
            if (glbMap[row][col]==0)
            {
                curLine+=".";
            }
            if (glbMap[row][col]==1)
            {
                curLine+="#";
            }
            if (glbMap[row][col]==2)
            {
                curLine+="X";
            }

            col+=1;
        }

        print(curLine);
        row+=1;
    }
}

// 0 can't go, 1 can go, 2 out of bounds
fn canGo(curC,curR,curDir)
{
    curC+=glbDirections[curDir][0];
    curR+=glbDirections[curDir][1];

    if ((curC<0)||(curR<0)||(curC>(glbMap[0].length-1))||(curR>(glbMap.length-1)))
    {
        return 2;
    }

    if (glbMap[curR][curC]!=1)
    {
        return 1;
    }

    return 0;
}

fn simulate(inc,inr)
{
    curDirection=0;
    curC=inc;
    curR=inr;

    while (true)
    {
        glbMap[curR][curC]=2;
        glbVisitedMap[curR][curC][curDirection]=true;

        k=canGo(curC,curR,curDirection);
        if (k==2)
        {
            return 1;
        }
        if ((k==1))
        {
            curC+=glbDirections[curDirection][0];
            curR+=glbDirections[curDirection][1];

            if (glbVisitedMap[curR][curC][curDirection]==true)
            {
                // path loops
                return 0;
            }
        }
        else
        {
            // rot8, at next iteration we'll see if we can go that dir
            curDirection+=1;
            curDirection%=4;
        }
    }

    return 0;
}

fn countXs()
{
    count=0;

    foreach (line in glbMap)
    {
        foreach (c in line)
        {
            if (c==2)
            {
                count+=1;
            }
        }
    }

    return count;
}

fn part1(arr)
{
    glbinitialC=-1;
    glbinitialR=-1;

    row=0;
    foreach (line in arr)
    {
        col=0;
        newLine=[];
        newVisitedLine=[];

        foreach (c in line)
        {
            if (c==".")
            {
                newLine.add(0);
            }
            if (c=="#")
            {
                newLine.add(1);
            }
            if (c=="^")
            {
                glbinitialC=col;
                glbinitialR=row;
                newLine.add(0);
            }
            
            newVisitedLine.add([false,false,false,false]);
            col+=1;
        }

        glbMap.add(newLine);
        glbVisitedMap.add(newVisitedLine);
        row+=1;
    }

    //print("Initial col: ",initialC," initial row: ",initialR);

    simulate(glbinitialC,glbinitialR);

    //printMap();
    print("Part 1:",countXs()," (4826)");
}

fn clearMap()
{
    row=0;
    foreach (line in glbMap)
    {
        col=0;
        foreach (c in line)
        {
            if (c==2)
            {
                glbMap[row][col]=0;
            }

            glbVisitedMap[row][col]=[false,false,false,false];
            col+=1;
        }
        row+=1;
    }
}

fn part2()
{
    pointList=[];

    row=0;
    foreach (line in glbMap)
    {
        col=0;
        foreach (c in line)
        {
            if (c==2)
            {
                if ((col==glbinitialC)&&(row==glbinitialR))
                {
                }
                else
                {
                    pointList.add([col,row]);
                }
            }

            col+=1;
        }
        row+=1;
    }

    //

    numPointz=pointList.length;
    pnum=0;
    numLoops=0;
    foreach (point in pointList)
    {
        clearMap();
        glbMap[point[1]][point[0]]=1;
        //print("Testing point ",point," numLoops:",numLoops," ",pnum,"/",numPointz);

        ret=simulate(glbinitialC,glbinitialR);

        if (ret==0)
        {
            numLoops+=1;
            //print("Loops");
        }

        glbMap[point[1]][point[0]]=0;
        pnum+=1;
    }

    print("Part 2:",numLoops," (1721)");
}

fn main(params)
{
    t0=getMillisecondsSinceEpoch();

    sarr=readInput();
    part1(sarr);
    part2();

    t1=getMillisecondsSinceEpoch();
    t1-=t0;
    print("Execution time:",t1);
}
