/* AoC 2024 23 */

glbMaxCliqueLen=0;

fn readInput()
{
    //sarr=readTextFileLineByLine("d:\prova\aoc2024\aoc23.2024.test.txt");
    sarr=readTextFileLineByLine("d:\prova\aoc2024\aoc23.2024.txt");
    return sarr;
}

fn findTripletsWithT(listOfUniqueComputers,listOfConnections)
{
    finalList=[];

    idxComp=0;
    foreach (comp in listOfUniqueComputers)
    {
        if (comp[0]=="t")
        {
            foreach (subcomp in listOfConnections[idxComp])
            {
                if (subcomp!=comp)
                {
                    idxSubcomp=listOfUniqueComputers.find(subcomp);
                    foreach (subsubcomp in listOfConnections[idxSubcomp])
                    {
                        if ((subsubcomp!=comp)&&(subsubcomp!=subcomp))
                        {
                            idx3=listOfUniqueComputers.find(subsubcomp);
                            connsof3=listOfConnections[idx3];
                            if (connsof3.find(comp)!=-1)
                            {
                                //print(comp," ",subcomp," ",subsubcomp," ",listOfConnections[idxSubcomp]);
                                triplet=[comp,subcomp,subsubcomp];
                                triplet.sort();
                                if (finalList.find(triplet)==-1)
                                {
                                    finalList.add(triplet);
                                }
                            }
                        }
                    }
                }
            }
        }
        idxComp+=1;
    }

    foreach (el in finalList)
    {
        print(el);
    }

    print(finalList.length);
}

fn part1(input)
{
    listOfUniqueComputers=[];
    foreach (complink in input)
    {
        comps=complink.split("-");
        if (listOfUniqueComputers.find(comps[0])==-1)
        {
            listOfUniqueComputers.add(comps[0]);
        }
        if (listOfUniqueComputers.find(comps[1])==-1)
        {
            listOfUniqueComputers.add(comps[1]);
        }
    }

    print(listOfUniqueComputers);

    listOfConnections=[];

    foreach (comp in listOfUniqueComputers)
    {
        konnections=[];
        foreach (complink in input)
        {
            comps=complink.split("-");
            if (comps[0]==comp)
            {
                konnections.add(comps[1]);
            }
            if (comps[1]==comp)
            {
                konnections.add(comps[0]);
            }
        }
        listOfConnections.add(konnections);
    }

    foreach (conn in listOfConnections)
    {
        print(conn.length);
    }

    //

    findTripletsWithT(listOfUniqueComputers,listOfConnections);
}

fn areConnected(n0,n1,nodes,connections)
{
    //print("checking if those are connected:",n0," ",n1);

    n0idx=nodes.find(n0);
    //print("node ",n0," index:",n0idx);
    conns=connections[n0idx];
    //print("Connections:",conns);
    //print(conns.find(n1));

    if (conns.find(n1)!=-1)
    {
        //print("They are connected");
        return true;
    }

    return false;
}

fn validateClique(c,nodes,connections)
{
    foreach (n0 in c)
    {
        foreach (n1 in c)
        {
            if (n0!=n1)
            {
                if (!areConnected(n0,n1,nodes,connections))
                {
                    return false;
                }
            }
        }
    }

    return true;
}

fn findCliques(node,nodes,connections,clique,visited)
{
    if (clique.length>glbMaxCliqueLen)
    {
        print(clique);
        glbMaxCliqueLen=clique.length;
    }

    nodeIdx=nodes.find(node);
    subConns=connections[nodeIdx];

    foreach (n in subConns)
    {
        if (visited.find(n)==-1)
        {
            newClique=clique;
            newClique.add(n);

            if (validateClique(newClique,nodes,connections))
            {
                newVisited=visited;
                newVisited.add(n);

                findCliques(n,nodes,connections,newClique,newVisited);
            }
        }
    }
}

fn part2(input)
{
    listOfUniqueComputers=[];
    foreach (complink in input)
    {
        comps=complink.split("-");
        if (listOfUniqueComputers.find(comps[0])==-1)
        {
            listOfUniqueComputers.add(comps[0]);
        }
        if (listOfUniqueComputers.find(comps[1])==-1)
        {
            listOfUniqueComputers.add(comps[1]);
        }
    }

    print(listOfUniqueComputers);

    listOfConnections=[];

    foreach (comp in listOfUniqueComputers)
    {
        konnections=[];
        foreach (complink in input)
        {
            comps=complink.split("-");
            if (comps[0]==comp)
            {
                konnections.add(comps[1]);
            }
            if (comps[1]==comp)
            {
                konnections.add(comps[0]);
            }
        }
        listOfConnections.add(konnections);
    }

    //clique=["co"];
    //visited=["co"];
    //findCliques("co",listOfUniqueComputers,listOfConnections,clique,visited);

    //areConnected("ta","ka",listOfUniqueComputers,listOfConnections);

    foreach (node in listOfUniqueComputers)
    {
        print("Finding cliques for ",node);
        //clique=[node];
        //visited=[node];
        //findCliques(node,listOfUniqueComputers,listOfConnections,clique,visited);
        
        idxnode=listOfUniqueComputers.find(node);
        connz=listOfConnections[idxnode];
        //connz.add(node);

        foreach (el in connz)
        {
            connz2=[];
            foreach (el2 in connz)
            {
                if (el2!=el)
                {
                    connz2.add(el2);
                }
            }

            if (validateClique(connz2,listOfUniqueComputers,listOfConnections))
            {
                print("fondzit! ",connz2);
                connz2.add(node);
                connz2.sort();
                print(connz2);
                return;
            }
        }
    }
}

fn main(params)
{
    input=readInput();
    //part1(input);
    part2(input);
}
