
/* 
    AoC 2024 23 
    this day I discovered "cliques" and an apparently fast algorithm to find them
*/

glbMaxClique=[];
glbMaxCliqueLen=0;
glbDiscarded=[];

glbAdjacencyCache={};
glbListOfUniqueComputers=[];
glbListOfConnections=[];

fn readInput()
{
    //sarr=readTextFileLineByLine("d:\prova\aoc2024\aoc23.2024.test.txt");
    sarr=readTextFileLineByLine("d:\prova\aoc2024\aoc23.2024.txt");
    return sarr;
}

fn findTripletsWithT(listOfUniqueComputers,listOfConnections)
{
    finalList=[];

    idxComp=0;
    foreach (comp in listOfUniqueComputers)
    {
        if (comp[0]=="t")
        {
            foreach (subcomp in listOfConnections[idxComp])
            {
                if (subcomp!=comp)
                {
                    idxSubcomp=listOfUniqueComputers.find(subcomp);
                    foreach (subsubcomp in listOfConnections[idxSubcomp])
                    {
                        if ((subsubcomp!=comp)&&(subsubcomp!=subcomp))
                        {
                            idx3=listOfUniqueComputers.find(subsubcomp);
                            connsof3=listOfConnections[idx3];
                            if (connsof3.find(comp)!=-1)
                            {
                                //print(comp," ",subcomp," ",subsubcomp," ",listOfConnections[idxSubcomp]);
                                triplet=[comp,subcomp,subsubcomp];
                                triplet.sort();
                                if (finalList.find(triplet)==-1)
                                {
                                    finalList.add(triplet);
                                }
                            }
                        }
                    }
                }
            }
        }
        idxComp+=1;
    }

    print("Part 1:",finalList.length," (1054)");
}

fn part1(input)
{
    listOfUniqueComputers=[];
    foreach (complink in input)
    {
        comps=complink.split("-");
        if (listOfUniqueComputers.find(comps[0])==-1)
        {
            listOfUniqueComputers.add(comps[0]);
        }
        if (listOfUniqueComputers.find(comps[1])==-1)
        {
            listOfUniqueComputers.add(comps[1]);
        }
    }

    //print(listOfUniqueComputers);

    listOfConnections=[];

    foreach (comp in listOfUniqueComputers)
    {
        konnections=[];
        foreach (complinkz in input)
        {
            comps=complinkz.split("-");
            if (comps[0]==comp)
            {
                konnections.add(comps[1]);
            }
            if (comps[1]==comp)
            {
                konnections.add(comps[0]);
            }
        }
        listOfConnections.add(konnections);
    }

    //

    findTripletsWithT(listOfUniqueComputers,listOfConnections);
}

fn areConnected(n0,n1)
{
    s=n0+n1;
    if (glbAdjacencyCache.findKey(s)!=-1)
    {
        return glbAdjacencyCache[s];
    }

    //print("checking if those are connected:",n0," ",n1);

    n0idx=glbListOfUniqueComputers.find(n0);
    //print("node ",n0," index:",n0idx);
    conns=glbListOfConnections[n0idx];
    //print("Connections:",conns);
    //print(conns.find(n1));

    connected=false;
    if (conns.find(n1)!=-1)
    {
        connected=true;
    }

    if (glbAdjacencyCache.findKey(s)==-1)
    {
        glbAdjacencyCache[s]=connected;
    }

    return connected;
}

fn validateClique(c)
{
    foreach (n0 in c)
    {
        foreach (n1 in c)
        {
            if (n0!=n1)
            {
                if (!areConnected(n0,n1))
                {
                    return false;
                }
            }
        }
    }

    return true;
}

fn findCliques(node,nodes,connections,clique,visited)
{
    print(clique," ",glbDiscarded);

    nodeIdx=nodes.find(node);
    subConns=connections[nodeIdx];

    foreach (n in subConns)
    {
        if (glbDiscarded.find(n)==-1)
        {
            if (visited.find(n)==-1)
            {
                newClique=clique;
                newClique.add(n);

                if (validateClique(newClique,nodes,connections))
                {
                    newVisited=visited;
                    newVisited.add(n);

                    findCliques(n,nodes,connections,newClique,newVisited);
                }
                else
                {
                    glbDiscarded.add(n);
                }
            }
        }
    }
}

fn part2(input)
{
    glbMaxClique=[];
    glbMaxCliqueLen=0;
    glbDiscarded=[];

    glbAdjacencyCache={};
    glbListOfUniqueComputers=[];
    glbListOfConnections=[];

    foreach (complink in input)
    {
        comps=complink.split("-");
        if (glbListOfUniqueComputers.find(comps[0])==-1)
        {
            glbListOfUniqueComputers.add(comps[0]);
        }
        if (glbListOfUniqueComputers.find(comps[1])==-1)
        {
            glbListOfUniqueComputers.add(comps[1]);
        }
    }

    //print(glbListOfUniqueComputers);

    foreach (comp in glbListOfUniqueComputers)
    {
        konnections=[];
        foreach (complinkz in input)
        {
            comps=complinkz.split("-");
            if (comps[0]==comp)
            {
                konnections.add(comps[1]);
                s=comp+comps[1];
                glbAdjacencyCache[s]=true;
            }
            if (comps[1]==comp)
            {
                konnections.add(comps[0]);
                s=comp+comps[0];
                glbAdjacencyCache[s]=true;
            }
        }
        glbListOfConnections.add(konnections);
    }

    foreach (node in glbListOfUniqueComputers)
    {
        //print("Finding cliques for ",node);
        
        clique=[node];
        visited=[node];
        nodeIdx=glbListOfUniqueComputers.find(node);
        neighbours=glbListOfConnections[nodeIdx];

        foreach (n in neighbours)        
        {
            newClique=clique;
            newClique.add(n);

            if (validateClique(newClique))
            {
                clique=newClique;
            }
        }

        if (clique.length>glbMaxCliqueLen)
        {
            //print(clique);
            glbMaxCliqueLen=clique.length;
            glbMaxClique=clique;
            glbMaxClique.sort();
        }        
    }

    print("Part 2:",glbMaxClique," (ch,cz,di,gb,ht,ku,lu,tw,vf,vt,wo,xz,zk)");
}

fn main(params)
{
    input=readInput();
    part1(input);
    part2(input);
}
