
/* 
    AoC 2024 15 
    funny sunday problem
*/

glbMap=[];
glbListOfMoves=[];
glbListOfImpactedBoxes=[];

fn readInput()
{
    //sarr=readTextFileLineByLine("d:\prova\aoc2024\aoc15.2024.test.txt");
    sarr=readTextFileLineByLine("d:\prova\aoc2024\aoc15.2024.txt");
    return sarr;
}

fn parseTheInput(arr)
{
    spaceFound=false;

    foreach (row in arr)
    {
        if (row.length==0)
        {
            spaceFound=true;
        }
        else
        {
            if (!spaceFound)
            {
                curRow=[];
                foreach (c in row)
                {
                    if (c=="#")
                    {
                        curRow.add(1);
                    }
                    if (c==".")
                    {
                        curRow.add(0);
                    }
                    if (c=="O")
                    {
                        curRow.add(2);
                    }
                    if (c=="@")
                    {
                        curRow.add(3);                        
                    }
                }
                glbMap.add(curRow);
            }
            else
            {
                foreach (c2 in row)
                {
                    glbListOfMoves.add(c2);
                }
            }
        }
    }
}

fn findRobotStartPos()
{
    pozx=-1;
    pozy=-1;

    y=0;
    foreach (row in glbMap)
    {
        x=0;
        foreach (c in row)
        {
            if (c==3)
            {
                pozx=x;
                pozy=y;
                glbMap[y][x]=0;
            }
            x+=1;
        }
        y+=1;
    }

    return [pozx,pozy];
}

fn printMap(robotCoords)
{
    y=0;
    foreach (row in glbMap)
    {
        x=0;
        s="";
        foreach (c in row)
        {
            if ((robotCoords[0]==x)&&(robotCoords[1]==y))
            {
                s+="@";                
            }
            else
            {
                if (c==0)
                {
                    s+=".";
                }
                if (c==1)
                {
                    s+="#";
                }
                if (c==2)
                {
                    s+="O";
                }
            }

            x+=1;
        }
        print(s);
        y+=1;
    }
}

fn canMove(curDir,npx,npy)
{
    if (glbMap[npy][npx]==1)
    {
        return false;
    }
    if (glbMap[npy][npx]==0)
    {
        return true;
    }

    directions=[[0,-1],[1,0],[0,1],[-1,0]];
    nextx=npx+directions[curDir][0];
    nexty=npy+directions[curDir][1];

    return canMove(curDir,nextx,nexty);
}

fn recursiveMove(curDir,npx,npy)
{
    directions=[[0,-1],[1,0],[0,1],[-1,0]];

    pix=glbMap[npy][npx];

    if (pix==2)
    {
        recursiveMove(curDir,npx+directions[curDir][0],npy+directions[curDir][1]);
    }
    else
    {
        if (pix==0)
        {
            glbMap[npy][npx]=2;
            return;
        }
        else
        {
            print("This should not happen.");
            return;
        }
    }

    return;
}

fn moveRobot(robotPos,moveNum)
{
    curMove=glbListOfMoves[moveNum];

    rx=robotPos[0];
    ry=robotPos[1];

    directions=[[0,-1],[1,0],[0,1],[-1,0]];

    if (curMove=="^")
    {
        curDir=0;
    }
    if (curMove==">")
    {
        curDir=1;
    }
    if (curMove=="v")
    {
        curDir=2;
    }
    if (curMove=="<")
    {
        curDir=3;
    }

    newPosx=rx+directions[curDir][0];
    newPosy=ry+directions[curDir][1];

    if (glbMap[newPosy][newPosx]==0)
    {
        glbMap[ry][rx]=0;
        return [newPosx,newPosy];
    }
    if (glbMap[newPosy][newPosx]==1)
    {
        return [rx,ry];
    }

    if (canMove(curDir,newPosx,newPosy))
    {
        recursiveMove(curDir,newPosx,newPosy);
        glbMap[ry][rx]=0;
        return [newPosx,newPosy];
    }

    return [rx,ry];
}

fn calcSumOfGPS(robotPos)
{
    sumgps=0;
    y=0;
    foreach (row in glbMap)
    {
        x=0;
        foreach (el in row)
        {
            if ((x==robotPos[0])&&(y==robotPos[1]))
            {
            }
            else
            {
                if (el==2)
                {
                    //print("summing x:",x," y:",y);
                    sumgps+=(100*y)+x;
                }
            }
            x+=1;
        }
        y+=1;
    }

    return sumgps;
}

fn part1(arr)
{
    parseTheInput(arr);

    //print(glbListOfMoves);
    robotPos=findRobotStartPos();
    //print(robotPos);
    //printMap(robotPos);

    moveNum=0;
    while (moveNum<glbListOfMoves.length)
    {
        //print("Move:",glbListOfMoves[moveNum]);
        robotPos=moveRobot(robotPos,moveNum);
        moveNum+=1;
        //printMap(robotPos);
    }

    print("Part 1:",calcSumOfGPS(robotPos)," (1406628)");
}

fn parseTheInputp2(arr)
{
    boxId=4;
    spaceFound=false;
    robotPos=[-1,-1];

    y=0;
    foreach (row in arr)
    {
        if (row.length==0)
        {
            spaceFound=true;
        }
        else
        {
            if (!spaceFound)
            {
                x=0;
                curRow=[];
                foreach (c in row)
                {
                    if (c=="#")
                    {
                        curRow.add(1);
                        curRow.add(1);
                    }
                    if (c==".")
                    {
                        curRow.add(0);
                        curRow.add(0);
                    }
                    if (c=="@")
                    {
                        curRow.add(3);                        
                        curRow.add(0);     
                        robotPos[0]=x;                   
                        robotPos[1]=y;                   
                    }
                    if (c=="O")
                    {
                        curRow.add(boxId);
                        curRow.add(boxId);
                        boxId+=1;
                    }

                    x+=2;
                }
                glbMap.add(curRow);
                y+=1;
            }
            else
            {
                foreach (c2 in row)
                {
                    glbListOfMoves.add(c2);
                }
            }
        }
    }

    return robotPos;
}

fn printNewMap()
{
    prevId=-1;
    foreach (row in glbMap)
    {
        s="";
        foreach (c in row)
        {
            if (c==0)
            {
                s+=".";
            }
            if (c==1)
            {
                s+="#";
            }
            if (c==3)
            {
                s+="@";
            }
            if (c>3)
            {
                if (prevId!=c)
                {
                    s+="[";
                }
                else
                {
                    s+="]";
                }
                prevId=c;
            }
        }
        print(s);
    }

    print("");
}

fn recursiveHorizontalMove(curDir,rx,ry)
{
    directions=[[0,-1],[1,0],[0,1],[-1,0]];

    newx=rx+directions[curDir][0];

    if (glbMap[ry][newx]!=0)
    {
        recursiveHorizontalMove(curDir,newx,ry);
    }
    glbMap[ry][newx]=glbMap[ry][rx];
    glbMap[ry][rx]=0;
}

fn buildListOfImpactedBoxes(curDir,rx,ry)
{
    directions=[[0,-1],[1,0],[0,1],[-1,0]];

    curCell=glbMap[ry][rx];
    if ((curCell==0)||(curCell==1))
    {
        return;
    }

    if (curCell>3)
    {
        if (glbListOfImpactedBoxes.find(curCell)==-1)
        {
            glbListOfImpactedBoxes.add(curCell);
        }
    
        neighbourLeftId=glbMap[ry][rx-1];
        if (neighbourLeftId==curCell)
        {
            buildListOfImpactedBoxes(curDir,rx-1,ry+directions[curDir][1]);
        }

        neighbourRightId=glbMap[ry][rx+1];
        if (neighbourRightId==curCell)
        {
            buildListOfImpactedBoxes(curDir,rx+1,ry+directions[curDir][1]);
        }

        buildListOfImpactedBoxes(curDir,rx,ry+directions[curDir][1]);
    }
}

fn moveBoxzee(boxid,curDir)
{
    directions=[[0,-1],[1,0],[0,1],[-1,0]];

    y=0;
    foreach (row in glbMap)
    {
        x=0;
        foreach (c in row)
        {
            if (c==boxid)
            {
                glbMap[y+directions[curDir][1]][x]=boxid;
                glbMap[y+directions[curDir][1]][x+1]=boxid;
                glbMap[y][x]=0;
                glbMap[y][x+1]=0;
                return;
            }

            x+=1;
        }
        y+=1;
    }
}

fn canMoveBoxzee(boxid,curDir)
{
    directions=[[0,-1],[1,0],[0,1],[-1,0]];

    y=0;
    foreach (row in glbMap)
    {
        x=0;
        foreach (c in row)
        {
            if (c==boxid)
            {
                p0=glbMap[y+directions[curDir][1]][x];
                p1=glbMap[y+directions[curDir][1]][x+1];

                if ((p0!=1)&&(p1!=1))                
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }

            x+=1;
        }
        y+=1;
    }
}

fn canMoveBoxzees(curDir)
{
    foreach (boxid in glbListOfImpactedBoxes)
    {
        if (!canMoveBoxzee(boxid,curDir))
        {
            return false;
        }
    }

    return true;
}

fn rearrangeImpactedBoxes(curDir)
{
    finalList=[];

    if (curDir==0)
    {
        y=0;
        while (y<glbMap.length)
        {
            curRow=glbMap[y];
            foreach (id in glbListOfImpactedBoxes)
            {
                if (curRow.find(id)!=-1)
                {
                    finalList.add(id);
                }
            }
            y+=1;
        }
    }
    else
    {
        y=glbMap.length-1;
        while (y>0)
        {
            curRow=glbMap[y];
            foreach (id2 in glbListOfImpactedBoxes)
            {
                if (curRow.find(id2)!=-1)
                {
                    finalList.add(id2);
                }
            }
            y-=1;
        }
    }

    return finalList;
}

fn moveRobotp2(rpos,mn)
{
    newMove=glbListOfMoves[mn];
    rx=rpos[0];
    ry=rpos[1];

    directions=[[0,-1],[1,0],[0,1],[-1,0]];
    curDir=-1;
    if (newMove=="^")
    {
        curDir=0;
    }
    if (newMove==">")
    {
        curDir=1;
    }
    if (newMove=="v")
    {
        curDir=2;
    }
    if (newMove=="<")
    {
        curDir=3;
    }

    newCell=glbMap[ry+directions[curDir][1]][rx+directions[curDir][0]];
    //print("New cell is ",newCell);

    if (newCell==0)
    {
        glbMap[ry][rx]=0;
        rx+=directions[curDir][0];
        ry+=directions[curDir][1];
        return [rx,ry];
    }
    if (newCell==1)
    {
        return [rx,ry];
    }

    if ((curDir==1)||(curDir==3))
    {
        // horizontal (eazy) move
        if (canMove(curDir,rx+directions[curDir][0],ry))
        {
            recursiveHorizontalMove(curDir,rx,ry);

            rx+=directions[curDir][0];
            return [rx,ry];
        }
        else
        {
            return [rx,ry];
        }
    }
    else
    {
        // vertical, "complex" move
        glbListOfImpactedBoxes=[];
        buildListOfImpactedBoxes(curDir,rx,ry+directions[curDir][1]);
        //print("Impacted ids:",glbListOfImpactedBoxes);

        if (canMoveBoxzees(curDir))
        {
            glbListOfImpactedBoxes=rearrangeImpactedBoxes(curDir);
            //print("boxzees can be muvd! ",glbListOfImpactedBoxes);
            
            foreach (boxid in glbListOfImpactedBoxes)
            {
                moveBoxzee(boxid,curDir);
            }

            glbMap[ry][rx]=0;
            ry+=directions[curDir][1];
            return [rx,ry];
        }
        else
        {
            return [rx,ry];
        }
    }

    return [rx,ry];
}

fn calcNewGPSTotal()
{
    totScore=0;

    y=0;
    foreach (row in glbMap)
    {
        x=0;
        while (x<(glbMap[0].length-1))
        {
            if (glbMap[y][x]>3)
            {
                totScore+=x+(100*y);
                x+=1;
            }

            x+=1;
        }

        y+=1;
    }

    return totScore;
}

fn part2(arr)
{
    glbMap=[];
    glbListOfMoves=[];
    glbListOfImpactedBoxes=[];

    robotPos=parseTheInputp2(arr);
    //print(glbListOfMoves);

    //printNewMap();
    //print("Initial robot pos:",robotPos);

    moveNum=0;
    while (moveNum<glbListOfMoves.length)
    {
        //print("Move:",glbListOfMoves[moveNum]," ",moveNum,"/",glbListOfMoves.length);
        robotPos=moveRobotp2(robotPos,moveNum);
        glbMap[robotPos[1]][robotPos[0]]=3;
        moveNum+=1;
        //printNewMap();
    }

    print("Part 2:",calcNewGPSTotal()," (1432781)");
}

fn main(params)
{
    input=readInput();
    part1(input);
    part2(input);
}
