
/* 
    AoC 2024 17 - intcode! 
    prints part1 solution with a comma, but I'm lazy
*/

glbPC=0;
glbRegA=0L;
glbRegB=0L;
glbRegC=0L;
glbProgram=[];
glbOutBuf="";

fn readInput()
{
    //sarr=readTextFileLineByLine("d:\prova\aoc2024\aoc17.2024.test.txt");
    sarr=readTextFileLineByLine("d:\prova\aoc2024\aoc17.2024.txt");
    return sarr;
}

fn parseProgram(arr)
{
    foreach (row in arr)
    {
        if (row.find("Register A: ")!=-1)
        {
            sVal="";
            idx=12;
            while (idx<row.length)
            {
                sVal+=row[idx];
                idx+=1;
            }
            glbRegA=toLong(sVal);
        }
        if (row.find("Register B: ")!=-1)
        {
            sVal="";
            idx=12;
            while (idx<row.length)
            {
                sVal+=row[idx];
                idx+=1;
            }
            glbRegB=toLong(sVal);
        }
        if (row.find("Register C: ")!=-1)
        {
            sVal="";
            idx=12;
            while (idx<row.length)
            {
                sVal+=row[idx];
                idx+=1;
            }
            glbRegC=toLong(sVal);
        }
        if (row.find("Program")!=-1)
        {
            sVal="";
            idx=8;
            while (idx<row.length)
            {
                sVal+=row[idx];
                idx+=1;
            }
            sArr=sVal.split(",");
            foreach (opcode in sArr)
            {
                glbProgram.add(toLong(opcode));
            }
        }
    }
}

fn getComboOperand()
{
    op=glbProgram[glbPC+1];

    if (op<4L)
    {
        return op;
    }
    if (op==4L)
    {
        return glbRegA;
    }
    if (op==5L)
    {
        return glbRegB;
    }
    if (op==6L)
    {
        return glbRegC;
    }

    print("this should not happen");
    return -1;
}

fn getPowerOf2(n)
{
    if (n==0L)
    {
        return 1L;
    }
    
    rez=1L;
    idx=0L;
    while (idx<n)
    {
        rez*=2L;
        idx+=1L;
    }

    return rez;
}

fn executeADV()
{
    combo=getComboOperand();
    pow=getPowerOf2(combo);
    res=glbRegA/pow;
    glbRegA=res;
}

fn executeBDV()
{
    combo=getComboOperand();
    pow=getPowerOf2(combo);
    res=glbRegA/pow;
    glbRegB=res;
}

fn executeCDV()
{
    combo=getComboOperand();
    pow=getPowerOf2(combo);
    res=glbRegA/pow;
    glbRegC=res;
}

fn executeBST()
{
    combo=getComboOperand();
    combo%=8L;
    glbRegB=combo;
}

fn executeJNZ()
{
    if (glbRegA!=0L)
    {
        lit=glbProgram[glbPC+1];
        glbPC=toInteger(toString(lit));
    }
    else
    {
        glbPC+=2;
    }
}

fn executeBXL()
{
    lit=glbProgram[glbPC+1];
    glbRegB=glbRegB^lit;
}

fn executeBXC()
{
    rc=glbRegC;
    glbRegB=glbRegB^rc;
}

fn executeOUT()
{
    combo=getComboOperand();
    combo%=8L;
    //print(combo,",");
    glbOutBuf+=toString(combo);
    glbOutBuf+=",";
}

fn executeProgram()
{
    halted=false;

    while (!halted)
    {
        opcode=glbProgram[glbPC];
        //print("opcode is:",opcode);

        if (opcode==0L)
        {
            // adv
            executeADV();
            glbPC+=2;
        }
        if (opcode==1L)
        {
            // bxl
            executeBXL();
            glbPC+=2;
        }
        if (opcode==2L)
        {
            // bst
            executeBST();
            glbPC+=2;
        }
        if (opcode==3L)
        {
            // jnz
            executeJNZ();
        }
        if (opcode==4L)
        {
            // bxc
            executeBXC();
            glbPC+=2;
        }
        if (opcode==5L)
        {
            // out
            executeOUT();
            glbPC+=2;
        }
        if (opcode==6L)
        {
            // bdv
            executeBDV();
            glbPC+=2;
        }
        if (opcode==7L)
        {
            // cdv
            executeCDV();
            glbPC+=2;
        }

        if (glbPC>=glbProgram.length)
        {
            halted=true;
        }
    }
}

fn part1(arr)
{
    parseProgram(arr);

    //print("A:",glbRegA," B:",glbRegB," C:",glbRegC," Program:",glbProgram);
    executeProgram();

    print("Part 1:",glbOutBuf," (7,4,2,5,1,4,6,0,4)");
    //print("A:",glbRegA," B:",glbRegB," C:",glbRegC," Program:",glbProgram);
}

fn areEqual(s1,a1)
{
    bufarr=s1.split(",");

    //print("buflen:",bufarr.length," arrlen",a1.length);
    if ((bufarr.length-1)!=a1.length)
    {
        return false;
    }

    idx=0;
    foreach (el in a1)
    {
        i=toLong(bufarr[idx]);
        if (el!=i)
        {
            return false;
        }
        idx+=1;
    }

    return true;
}

fn part2(arr)
{
    glbPC=0;
    glbRegA=0L;
    glbRegB=0L;
    glbRegC=0L;
    glbProgram=[];
    glbOutBuf="";

    parseProgram(arr);
    //print("A:",glbRegA," B:",glbRegB," C:",glbRegC," Program:",glbProgram);

    sProg="";
    idx=0;
    while (idx<glbProgram.length)
    {
        sProg+=toString(glbProgram[idx]);
        sProg+=",";
        idx+=1;
    }

    //print("SProg:",sProg);

    idx=glbProgram.length-1;
    baseNum=0L;
    while (true)
    {
        oct=0L;
        arrz=[];
        while (oct<64L)
        {
            g=baseNum;
            g|=oct;

            //print("regA is ",g);
            glbRegA=g;
            glbRegB=0L;
            glbRegC=0L;
            glbPC=0;
            glbOutBuf="";
            executeProgram();
            
            //print("Result:",glbOutBuf);
            //print("proggi:",glbProgram);

            if (areEqual(glbOutBuf,glbProgram))
            {
                //print("finished!");
                print("Part 2:",g," (164278764924605)");
                return;
            }

            sarr=glbOutBuf.split(",");
            c=toLong(sarr[0]);
            if (c==glbProgram[idx])
            {
                //print("found ",c);
                arrz.add(oct);
            }

            oct+=1L;
        }

        arrz.sort();
        findz=arrz[0];

        baseNum|=findz;
        baseNum*=8L;
        idx-=1;

        if (idx<0)
        {
            return;
        }
    }
}

fn main(params)
{
    input=readInput();
    part1(input);
    part2(input);
}
