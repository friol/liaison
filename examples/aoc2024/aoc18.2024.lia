/* AoC 2024 18 */

glbMap=[];

fn readInput()
{
    //sarr=readTextFileLineByLine("c:\prova\aoc2024\aoc18.2024.test.txt");
    sarr=readTextFileLineByLine("c:\prova\aoc2024\aoc18.2024.txt");
    return sarr;
}

fn fallBytes(n,xsize,ysize,arr)
{
    y=0;
    while (y<ysize)
    {
        x=0;
        newRow=[];
        while (x<xsize)
        {
            newRow.add([0,0,[-1,-1]]);
            x+=1;
        }
        glbMap.add(newRow);
        y+=1;
    }

    //

    idx=0;
    while (idx<n)
    {
        snowflake=arr[idx];
        coords=snowflake.split(",");

        xc=toInteger(coords[0]);
        yc=toInteger(coords[1]);

        glbMap[yc][xc][0]=1;

        idx+=1;
    }

}

fn pop(arr)
{
    newarr=[];
    idx=0;
    while (idx<(arr.length-1))
    {
        newarr.add(arr[idx]);
        idx+=1;
    }

    //print("arr len:",arr.length);
    //print("poped len:",newarr.length);

    return newarr;
}

fn canGo(p,dir)
{
    newpx=p[0]+dir[0];
    newpy=p[1]+dir[1];

    if (newpx<0)
    {
        return false;
    }
    if (newpy<0)
    {
        return false;
    }
    if (newpx>=glbMap[0].length)
    {
        return false;
    }
    if (newpy>=glbMap.length)
    {
        return false;
    }

    if (glbMap[newpy][newpx][0]==1)
    {
        return false;
    }

    return true;
}

fn printPath(end)
{
    stepz=0;
    curv=end;
    while (true)
    {
        //print(curv);
        parx=glbMap[curv[1]][curv[0]][2][0];
        pary=glbMap[curv[1]][curv[0]][2][1];

        if ((parx==-1)&&(pary==-1))
        {
            print(stepz);
            return;
        }
        curv=[parx,pary];
        stepz+=1;
    }
}

fn addToFront(arr,el)
{
    newarr=[];
    newarr.add(el);
    foreach (oldel in arr)
    {
        newarr.add(oldel);
    }
    return newarr;
}

fn findShortestPath(start,end)
{
    s=[];
    glbMap[start[1]][start[0]][1]=1;
    s.add(start);

    while (s.length!=0)
    {
        v=s[s.length-1];
        s=pop(s);

        if ((v[0]==end[0])&&(v[1]==end[1]))
        {
            print("Fount!",v);
            printPath(end);
            return true;
        }

        directions=[[0,-1],[1,0],[0,1],[-1,0]];

        foreach (dir in directions)
        {
            if (canGo(v,dir))
            {
                if (glbMap[v[1]+dir[1]][v[0]+dir[0]][1]==0)
                {
                    glbMap[v[1]+dir[1]][v[0]+dir[0]][1]=1;
                    glbMap[v[1]+dir[1]][v[0]+dir[0]][2]=v;
                    
                    s=addToFront(s,[v[0]+dir[0],v[1]+dir[1]]);
                }
            }
        }
    }

    return false;
}

fn part1(arr)
{
    //gridXsize=7;
    //gridYsize=7;
    //numBytes=12;

    gridXsize=71;
    gridYsize=71;
    numBytes=1024;

    fallBytes(numBytes,gridXsize,gridYsize,arr);

    start=[0,0];
    end=[gridXsize-1,gridYsize-1];

    findShortestPath(start,end);
}

fn part2(arr)
{
    //gridXsize=7;
    //gridYsize=7;
    //numBytes=12;

    gridXsize=71;
    gridYsize=71;
    numBytes=2750;

    fallBytes(numBytes,gridXsize,gridYsize,arr);

    start=[0,0];
    end=[gridXsize-1,gridYsize-1];

    found=true;
    while (found)
    {
        y=0;
        foreach (row in glbMap)
        {
            x=0;
            foreach (el in row)
            {
                glbMap[y][x][1]=0;
                glbMap[y][x][2]=[-1,-1];
                x+=1;
            }
            y+=1;
        }

        found=findShortestPath(start,end);

        if (found)
        {
            coordArr=arr[numBytes];
            print("adding new obstacle:",coordArr);
            coordz=coordArr.split(",");
            glbMap[toInteger(coordz[1])][toInteger(coordz[0])][0]=1;
            numBytes+=1;
        }
    }
}

fn main(params)
{
    input=readInput();
    //part1(input);
    part2(input);
}
