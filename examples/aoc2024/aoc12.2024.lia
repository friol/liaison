
/* 
    AoC 2024 12 
    a bit messy but works
*/

glbMap=[];
glbFloodMap=[];

fn readInput()
{
    //sarr=readTextFileLineByLine("d:\prova\aoc2024\aoc12.2024.test.txt");
    sarr=readTextFileLineByLine("d:\prova\aoc2024\aoc12.2024.txt");
    return sarr;
}

fn floodFill(x,y,id,lett)
{
    if (x<0) 
    {
        return;
    }

    if (y<0)
    {
        return;
    }

    if (x>=glbFloodMap[0].length)
    {
        return;
    }

    if (y>=glbFloodMap.length)
    {
        return;
    }

    if (glbFloodMap[y][x]!=-1)
    {
        return;
    }

    if (glbMap[y][x]==lett)
    {
        glbFloodMap[y][x]=id;
    }
    else
    {
        return;
    }

    floodFill(x,y-1,id,lett);
    floodFill(x+1,y,id,lett);
    floodFill(x,y+1,id,lett);
    floodFill(x-1,y,id,lett);
}

fn buildFloodMap()
{
    shapeId=0;
    y=0;
    foreach (row in glbFloodMap)
    {
        x=0;
        foreach (c in row)
        {
            if (c==-1)
            {
                floodFill(x,y,shapeId,glbMap[y][x]);
                shapeId+=1;
            }

            x+=1;
        }

        y+=1;
    }

    return shapeId;
}

fn printFloodMap()
{
    foreach (row in glbFloodMap)
    {
        print(row);
    }
}

fn calcArea(idx)
{
    total=0;
    foreach (row in glbFloodMap)
    {
        foreach (c in row)
        {
            if (c==idx)
            {
                total+=1;
            }
        }
    }
    return total;
}

fn numConfining(x,y,idx)
{
    tot=0;
    if (x>0)
    {
        if (glbFloodMap[y][x-1]!=idx)
        {
            tot+=1;
        }
    }
    else
    {
        tot+=1;
    }

    if (y>0)
    {
        if (glbFloodMap[y-1][x]!=idx)
        {
            tot+=1;
        }
    }
    else
    {
        tot+=1;
    }

    if (x<(glbFloodMap[0].length-1))
    {
        if (glbFloodMap[y][x+1]!=idx)
        {
            tot+=1;
        }
    }
    else
    {
        tot+=1;
    }

    if (y<(glbFloodMap.length-1))
    {
        if (glbFloodMap[y+1][x]!=idx)
        {
            tot+=1;
        }
    }
    else
    {
        tot+=1;
    }

    return tot;
}

fn calcPerimeter(idx)
{
    total=0;
    y=0;
    foreach (row in glbFloodMap)
    {
        x=0;
        foreach (c in row)
        {
            if (c==idx)
            {
                total+=numConfining(x,y,idx);
            }
            x+=1;
        }
        y+=1;
    }
    return total;
}

fn countSpans(arr)
{
    ns=1;

    idx=0;
    if (arr.length==1)
    {
        return 1;
    }

    while (idx<arr.length)
    {
        if (idx<(arr.length-1))
        {
            if (arr[idx+1]!=(arr[idx]+1))
            {
                ns+=1;            
            }
        }
        idx+=1;
    }

    return ns;
}

fn calcNumSpansHorz(arr,miny,maxy)
{
    numSpans=0;

    //print(arr);
    //print(miny," ",maxy);

    y=miny;
    while (y<=maxy)
    {
        tmpArr=[];
        foreach (el in arr)
        {
            if ((el[1]==y)&&(el[2]==0))
            {
                tmpArr.add(el[0]);
            }
        }
        if (tmpArr.length>0)
        {
            tmpArr.sort();
            cnt=countSpans(tmpArr);
            //print(tmpArr," has ",cnt," up sides");
            numSpans+=cnt;
        }

        tmpArr=[];
        foreach (elz in arr)
        {
            if ((elz[1]==y)&&(elz[2]==1))
            {
                tmpArr.add(elz[0]);
            }
        }
        if (tmpArr.length>0)
        {
            tmpArr.sort();
            cnt=countSpans(tmpArr);
            //print(tmpArr," has ",cnt," downsides");
            numSpans+=cnt;
        }

        y+=1;
    }

    return numSpans;
}

fn calcNumSpansVert(arr,minx,maxx)
{
    numSpans=0;

    x=minx;
    while (x<=maxx)
    {
        tmpArr=[];
        foreach (el in arr)
        {
            if ((el[0]==x)&&(el[2]==0))
            {
                tmpArr.add(el[1]);
            }
        }
        if (tmpArr.length>0)
        {
            tmpArr.sort();
            cnt=countSpans(tmpArr);
            //print(tmpArr," has ",cnt," vert leftsides");
            numSpans+=cnt;
        }

        tmpArr=[];
        foreach (elz in arr)
        {
            if ((elz[0]==x)&&(elz[2]==1))
            {
                tmpArr.add(elz[1]);
            }
        }
        if (tmpArr.length>0)
        {
            tmpArr.sort();
            cnt=countSpans(tmpArr);
            //print(tmpArr," has ",cnt," vert roitsides");
            numSpans+=cnt;
        }

        x+=1;
    }

    return numSpans;
}

fn calcNumOfSides(idx)
{
    // calc min/max coords

    minX=99999;
    maxX=-99999;
    minY=99999;
    maxY=-99999;

    y=0;
    foreach (row in glbFloodMap)
    {
        x=0;

        foreach (c in row)
        {
            if (c==idx)
            {
                if (x<minX)
                {
                    minX=x;
                }
                if (y<minY)
                {
                    minY=y;
                }
                if (x>maxX)
                {
                    maxX=x;
                }
                if (y>maxY)
                {
                    maxY=y;
                }
            }
            x+=1;
        }

        y+=1;
    }

    //print("minx:",minX," maxX:",maxX," minY:",minY," maxY:",maxY);

    // scan horizontally and produce a list of spans
    horzSpanz=[];
    y=minY;
    while (y<=maxY)
    {
        x=minX;
        while (x<=maxX)
        {
            if (glbFloodMap[y][x]==idx)
            {
                if (y==0)
                {
                    horzSpanz.add([x,-1,0]);
                    if (glbFloodMap[1][x]!=idx)
                    {
                        horzSpanz.add([x,0,1]);
                    }
                }
                else
                {
                    if (y<(glbFloodMap.length-1))
                    {
                        if (glbFloodMap[y-1][x]!=idx)
                        {
                            horzSpanz.add([x,y-1,0]);
                        }
                        if (glbFloodMap[y+1][x]!=idx)
                        {
                            horzSpanz.add([x,y,1]);
                        }
                    }
                    else
                    {
                        if (glbFloodMap[y-1][x]!=idx)
                        {
                            horzSpanz.add([x,y,0]);
                        }
                        horzSpanz.add([x,y+1,1]);
                    }
                }
            }
            x+=1;
        }

        y+=1;
    }

    numOfHorzSpans=calcNumSpansHorz(horzSpanz,minY-1,maxY+1);

    // scan vertically and produce a list of spans
    vertSpanz=[];
    x=minX;
    while (x<=maxX)
    {
        y=minY;
        while (y<=maxY)
        {
            if (glbFloodMap[y][x]==idx)
            {
                if (x==0)
                {
                    vertSpanz.add([-1,y,0]);
                    if (glbFloodMap[y][1]!=idx)
                    {
                        vertSpanz.add([0,y,1]);
                    }
                }
                else
                {
                    if (x<(glbFloodMap[0].length-1))
                    {
                        if (glbFloodMap[y][x-1]!=idx)
                        {
                            vertSpanz.add([x-1,y,0]);
                        }
                        if (glbFloodMap[y][x+1]!=idx)
                        {
                            vertSpanz.add([x,y,1]);
                        }
                    }
                    else
                    {
                        if (glbFloodMap[y][x-1]!=idx)
                        {
                            vertSpanz.add([x,y,0]);
                        }
                        vertSpanz.add([x+1,y,1]);
                    }
                }
            }
            y+=1;
        }

        x+=1;
    }

    numOfVertSpans=calcNumSpansVert(vertSpanz,minX-1,maxX+1);

    return numOfHorzSpans+numOfVertSpans;
}

fn part1and2(arr)
{
    maxShapeId=-1;
    foreach (row in arr)
    {
        floodRow=[];
        curRow=[];
        foreach (c in row)
        {
            curRow.add(c);
            floodRow.add(-1);
        }
        glbMap.add(curRow);
        glbFloodMap.add(floodRow);
    }

    // 

    //print("Building flood map");
    maxShapeId=buildFloodMap();

    //print("Max shape id:",maxShapeId);

    idees=[];
    foreach (rowz in glbFloodMap)
    {
        foreach (cz in rowz)
        {
            if (idees.find(cz)==-1)
            {
                idees.add(cz);
            }
        }
    }

    //print("Unique shapes:",idees.length);

    total=0;
    idx=0;
    area=0;
    perm=0;
    foreach (idxs in idees)
    {
        //print("id:",idx);

        area=calcArea(idxs);
        if (area!=0)
        {
            perm=calcPerimeter(idxs);
            if (perm!=0)
            {
                prod=area*perm;
                total+=prod;
            }
        }
    }

    print("Part 1:",total," (1375476)");

    // part 2

    glbMap=[];
    glbFloodMap=[];

    maxShapeId=-1;
    foreach (rowzy in arr)
    {
        floodRow=[];
        curRow=[];
        foreach (c2 in rowzy)
        {
            curRow.add(c2);
            floodRow.add(-1);
        }
        glbMap.add(curRow);
        glbFloodMap.add(floodRow);
    }

    // 

    //print("Building flood map");
    maxShapeId=buildFloodMap();

    //print("Max shape id:",maxShapeId);

    idees=[];
    foreach (rowzx in glbFloodMap)
    {
        foreach (czz in rowzx)
        {
            if (idees.find(czz)==-1)
            {
                idees.add(czz);
            }
        }
    }

    total=0;
    idx=0;
    area=0;
    perm=0;
    foreach (idxy in idees)
    {
        //print("id:",idxy);

        area=calcArea(idxy);
        if (area!=0)
        {
            perm=calcNumOfSides(idxy);
        }

        if ((area!=0)&&(perm!=0))
        {
            prod=area*perm;
            total+=prod;
        }

    }

    print("Part 2:",total," (821372)");
}

fn main(params)
{
    input=readInput();
    part1and2(input);
}
