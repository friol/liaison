/* aoc 07 2023 - camel cards */

fn readInput()
{
    //sarr=readTextFileLineByLine("d:\prova\liaPrograms\aoc07.2023.test.txt");
    sarr=readTextFileLineByLine("d:\prova\liaPrograms\aoc07.2023.txt");
    return sarr;
}

fn getRank(cards)
{
    cDict={};
    foreach (c in cards)
    {
        k=cDict.keys;
        if (k.find(c)<0)
        {
            cDict[c]=1;
        }
        else
        {
            cDict[c]+=1;
        }
    }

    // ranks are 0-6
    k=cDict.keys;
    if (k.length==1)
    {
        // all cards are equal
        return 6;
    }

    if (k.length==2)
    {
        if ((cDict[k[0]]==4)||(cDict[k[1]]==4))
        {
            // 4 cards are equal
            return 5;
        }

        // full
        return 4;
    }

    if (k.length==3)
    {
        if ((cDict[k[0]]==3)||(cDict[k[1]]==3)||(cDict[k[2]]==3))
        {
            // tris
            return 3;
        }

        // doppia coppia
        return 2;
    }

    if (k.length==4)
    {
        return 1;
    }

    return 0;
}

fn singleCardCompare(c0,c1)
{
    //print("singleCardCompare");
    cardOrder=["A","K","Q","J","T","9","8","7","6","5","4","3","2"];

    idx=0;
    while (idx<c0.length)
    {
        p0=cardOrder.find(c0[idx]);
        p1=cardOrder.find(c1[idx]);
        //print(p0,p1);

        if (p0>p1)
        {
            return 1;
        }
        if (p0<p1)
        {
            return 0;
        }

        idx+=1;
    }

    return 0;
}

fn compare(c0,c1)
{
    rank0=0;
    rank1=1;

    rank0=getRank(c0);
    rank1=getRank(c1);

    if (rank0<rank1)
    {
        return 1;
    }
    else
    {
        if (rank0==rank1)
        {
            return singleCardCompare(c0,c1);
        }
    }

    // equality
    return 0; 
}

fn getHandsBid(h,arr)
{
    foreach (hand in arr)
    {
        ahand=hand.split(" ");
        if (ahand[0]==h)
        {
            return toInteger(ahand[1]);
        }
    }
}

fn part1(arr)
{
    scores=[];
    cardArr=[];
    foreach (c in arr)    
    {
        scores.add(c);
        a=c.split(" ");
        cardArr.add(a[0]);
    }

    i=0;
    while (i<cardArr.length)
    {
        j=0;
        while (j<cardArr.length)
        {
            if (i!=j)
            {
                res=compare(cardArr[i],cardArr[j]);
                if (res>0)
                {
                    //print("swappie",cardArr[i]," ",cardArr[j]);
                    tmp=cardArr[i];
                    cardArr[i]=cardArr[j];
                    cardArr[j]=tmp;
                }
            }
            j+=1;
        }
        i+=1;
    }

    total=0;
    rank=1;
    foreach (c in cardArr)
    {
        bid=getHandsBid(c,arr);
        print(c,bid);
        total+=bid*rank;
        rank+=1;
    }

    print(total);
}

fn singleCardCompare2(c0,c1)
{
    cardOrder=["A","K","Q","T","9","8","7","6","5","4","3","2","J"];

    idx=0;
    while (idx<c0.length)
    {
        p0=cardOrder.find(c0[idx]);
        p1=cardOrder.find(c1[idx]);
        //print(p0,p1);

        if (p0>p1)
        {
            return 1;
        }
        if (p0<p1)
        {
            return 0;
        }

        idx+=1;
    }

    return 0;
}

fn getPumpedCard(c)
{
    if (c.find("J")<0)
    {
        return c;
    }

    possibleCards=["A","K","Q","T","9","8","7","6","5","4","3","2"];

    bestCard=c;
    maxRank=getRank(c);
    foreach (pc in possibleCards)
    {
        jc=c.replace("J",pc);
        candidateRank=getRank(jc);
        //print("rank of",pc,"is",candidateRank);
        if (candidateRank>maxRank)
        {
            maxRank=candidateRank;
            bestCard=jc;
        }
        if (candidateRank==maxRank)
        {
            detailCompare=singleCardCompare2(bestCard,jc);
            if (detailCompare>0)
            {
                bestCard=jc;
            }
        }
    }

    return bestCard;
}

fn compare2(c0,c1,p0,p1)
{
    rank0=0;
    rank1=1;

    rank0=getRank(p0);
    rank1=getRank(p1);

    if (rank0<rank1)
    {
        return 1;
    }
    else
    {
        if (rank0==rank1)
        {
            return singleCardCompare2(c0,c1);
        }
    }

    // equality
    return 0; 
}

fn part2(arr)
{
    scores=[];

    cardArr=[];
    mutatedArr=[];

    foreach (c in arr)    
    {
        scores.add(c);
        a=c.split(" ");
        cardArr.add(a[0]);
        pc=getPumpedCard(a[0]);
        mutatedArr.add(pc);
    }

    i=0;
    while (i<cardArr.length)
    {
        j=0;
        while (j<cardArr.length)
        {
            if (i!=j)
            {
                res=compare2(cardArr[i],cardArr[j],mutatedArr[i],mutatedArr[j]);
                if (res>0)
                {
                    tmp=cardArr[i];
                    cardArr[i]=cardArr[j];
                    cardArr[j]=tmp;
                    tmp=mutatedArr[i];
                    mutatedArr[i]=mutatedArr[j];
                    mutatedArr[j]=tmp;
                }
            }
            j+=1;
        }
        i+=1;
    }

    total=0;
    rank=1;
    foreach (c in cardArr)
    {
        bid=getHandsBid(c,arr);
        print(c,bid);
        total+=bid*rank;
        rank+=1;
    }

    print(total);
}

fn main(params)
{
    cardArr=readInput();
    //part1(cardArr);
    part2(cardArr);
    //print(getPumpedCard("QQQJA"));
}
