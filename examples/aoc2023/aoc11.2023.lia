/* aoc 11 2023 - project manhattan */

fn readInput()
{
    sarr=readTextFileLineByLine("d:\prova\liaPrograms\aoc11.2023.txt");
    //sarr=readTextFileLineByLine("d:\prova\liaPrograms\aoc11.2023.test.txt");
    return sarr;
}

fn printGrid(g)
{
    foreach (row in g)
    {
        s="";
        foreach (c in row)
        {
            s+=c;
        }
        print(s);
    }
}

fn expandHorizontal(g)
{
    newGrid=[];
    row=0;
    while (row<g.length)
    {
        galaxyFound=false;
        newRow=[];
        curRow=g[row];
        foreach (c in curRow)
        {
            if (c=="#")
            {
                galaxyFound=true;
            }
            newRow.add(c);
        }

        newGrid.add(newRow);
        if (galaxyFound==false)
        {
            newGrid.add(newRow);
        }

        row+=1;
    }

    return newGrid;
}

fn expandVertical(g)
{
    newGrid=[];
    colIsWithoutGalaxies=[];

    col=0;
    row0=g[0];
    clen=row0.length;
    while (col<clen)
    {
        row=0;
        colWithoutGalaxies=true;
        while (row<g.length)
        {
            pix=g[row][col];
            if (pix=="#")
            {
                colWithoutGalaxies=false;
            }
            row+=1;
        }
        colIsWithoutGalaxies.add(colWithoutGalaxies);
        col+=1;
    }

    row=0;
    while (row<g.length)
    {
        curRow=[];
        col=0;
        while (col<clen)
        {
            curRow.add(g[row][col]);
            if (colIsWithoutGalaxies[col]==true)
            {
                curRow.add(".");
            }
            col+=1;
        }
        newGrid.add(curRow);
        row+=1;
    }

    return newGrid;
}

fn findGalaxies(g)
{
    lofPoints=[];

    y=0;
    foreach (row in g)
    {
        x=0;
        foreach(c in row)
        {
            if (c=="#")
            {
                pt=[];
                pt.add(toLong(toString(x))); pt.add(toLong(toString(y)));
                lofPoints.add(pt);
            }
            x+=1;
        }
        y+=1;
    }

    return lofPoints;
}

fn manhattanDistance(g0,g1)
{
    dx=g0[0]-g1[0];
    dy=g0[1]-g1[1];

    if (dx<toLong("0"))
    {
        dx=dx*toLong("-1");
    }

    if (dy<toLong("0"))
    {
        dy=dy*toLong("-1");
    }

    return dx+dy;
}

fn part1(grid)
{
    grid2=expandHorizontal(grid);
    grid3=expandVertical(grid2);

    //printGrid(grid3);

    lofGalaxies=findGalaxies(grid3);

    g0=0;
    sumOfD=0;
    while (g0<(lofGalaxies.length-1))
    {
        g1=g0+1;
        while (g1<lofGalaxies.length)
        {
            d=manhattanDistance(lofGalaxies[g0],lofGalaxies[g1]);
            sumOfD+=d;
            g1+=1;
        }

        g0+=1;
    }

    print("sum of distances is:",sumOfD);
}

fn calcExpFactor(x,colIsWithoutGalaxies)
{
    xpf=toLong("0");

    idx=toLong("0");
    foreach (col in colIsWithoutGalaxies)
    {
        if (col==true)
        {
            if (x>idx)
            {
                xpf+=toLong("1");
            }
        }
        idx+=toLong("1");
    }

    return xpf;
}

fn calcExpFactorV(y,rowIsWithoutGalaxies)
{
    xpf=toLong("0");

    idy=toLong("0");
    foreach (row in rowIsWithoutGalaxies)
    {
        if (row==true)
        {
            if (y>idy)
            {
                xpf+=toLong("1");
            }
        }
        idy+=toLong("1");
    }

    return xpf;
}

fn expandHorz(row,lg,horzExpAmount,colWithoutGalaxies)
{
    newLg=[];

    foreach (el in lg)
    {
        if (el[1]==row)
        {
            expFactor=calcExpFactor(el[0],colWithoutGalaxies);
            el[0]=el[0]+(expFactor*horzExpAmount);
        }
        newLg.add(el);
    }

    return newLg;
}

fn expandVert(col,lg,vertExpAmount,rowWithoutGalaxies)
{
    newLg=[];

    foreach (el in lg)
    {
        if (el[0]==col)
        {
            expFactor=calcExpFactorV(el[1],rowWithoutGalaxies);
            el[1]=el[1]+(expFactor*vertExpAmount);
        }
        newLg.add(el);
    }

    return newLg;
}

fn biggerExpansionVertical(g,lg,vertExpAmount)
{
    rowIsWithoutGalaxies=[];

    row=0;
    row0=g[0];
    rlen=row0.length;
    while (row<g.length)
    {
        colz=0;
        rowWithoutGalaxies=true;
        while (colz<rlen)
        {
            pix=g[row][colz];
            if (pix=="#")
            {
                rowWithoutGalaxies=false;
            }
            colz+=1;
        }
        rowIsWithoutGalaxies.add(rowWithoutGalaxies);
        row+=1;
    }

    //print(rowIsWithoutGalaxies);

    listOfX=[];
    foreach (el in lg)
    {
        x=el[0];
        if (listOfX.find(x)<0)
        {
            listOfX.add(x);
        }
    }

    foreach (col in listOfX)
    {
        lg=expandVert(col,lg,vertExpAmount,rowIsWithoutGalaxies);
        col+=toLong("1");
    }

    return lg;
}

fn biggerExpansionHorizontal(g,lg,horzExpAmount)
{
    colIsWithoutGalaxies=[];

    col=0;
    row0=g[0];
    clen=row0.length;
    while (col<clen)
    {
        row=0;
        colWithoutGalaxies=true;
        while (row<g.length)
        {
            pix=g[row][col];
            if (pix=="#")
            {
                colWithoutGalaxies=false;
            }
            row+=1;
        }
        colIsWithoutGalaxies.add(colWithoutGalaxies);
        col+=1;
    }

    rowz=toLong("0");
    glenL=toLong(toString(g.length));
    while (rowz<glenL)
    {
        lg=expandHorz(rowz,lg,horzExpAmount,colIsWithoutGalaxies);
        rowz+=toLong("1");
    }

    return lg;
}

fn printBigGrid(l,dimx,dimy)
{
    y=0;
    while (y<dimy)
    {
        s="";
        x=0;
        while (x<dimx)
        {
            pt=[];
            pt.add(toLong(toString(x))); pt.add(toLong(toString(y)));
            if (l.find(pt)>=0)
            {
                s+="#";
            }
            else
            {
                s+=".";
            }
            x+=1;
        }
        print(s);
        y+=1;
    }
}

fn part2(grid)
{
    expAmount=toLong("999999");

    lofGalaxies=findGalaxies(grid);
    //print(lofGalaxies);

    lofGalaxies=biggerExpansionHorizontal(grid,lofGalaxies,expAmount);
    //print(lofGalaxies);
    
    lofGalaxies=biggerExpansionVertical(grid,lofGalaxies,expAmount);
    //print(lofGalaxies);

    g0=0;
    sumOfD=toLong("0");
    while (g0<(lofGalaxies.length-1))
    {
        g1=g0+1;
        while (g1<lofGalaxies.length)
        {
            d=manhattanDistance(lofGalaxies[g0],lofGalaxies[g1]);
            sumOfD+=d;
            g1+=1;
        }

        g0+=1;
    }

    print("sum of distances:",sumOfD);
}

fn main(params)
{
    arr=readInput();

    initialGrid=[];
    foreach (row in arr)
    {
        curRow=[];
        foreach (c in row)
        {
            curRow.add(c);
        }
        initialGrid.add(curRow);
    }

    //part1(initialGrid);
    part2(initialGrid);
}
